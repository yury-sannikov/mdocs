extends ../layouts/landingLayout.pug

block head
  title Subscribe
  script(type='text/javascript', src='https://js.stripe.com/v2/')
  script(type='text/javascript', src='/app/lib/zxcvbn/dist/zxcvbn.js')


block styles
  link(rel='stylesheet', href='/app/lib/animate.css/animate.css')

block scripts
  script(type='text/javascript', src='/app/lib/card/lib/js/jquery.card.js')
  script.
    (function(init) {
      init(window.jQuery, window, document);
    }(function($, window, document) {


      // Card
      var card = new Card({
        // a selector or DOM element for the form where users will
        // be entering their information
        form: 'form', // *required*
        // a selector or DOM element for the container
        // where you want the card to appear
        container: '.card-wrapper', // *required*

        formSelectors: {
          nameInput: 'input[name="name"]', // optional - defaults input[name="name"]
          numberInput: 'input[name="number"]', // optional — default input[name="number"]
          expiryInput: 'input[name="exp"]',
          //- expiryInput: 'input[name="exp_month"], input[name="exp_year"]', // optional — default input[name="expiry"]
          cvcInput: 'input[name="cvc"]', // optional — default input[name="cvc"]
          //- nameInput: 'input#name' // optional - defaults input[name="name"]
        },

        //- width: 200, // optional — default 350px
        formatting: true, // optional - default true

        // Strings for translation - optional
        messages: {
          validDate: 'valid\ndate', // optional - default 'valid\nthru'
          monthYear: 'mm/yyyy', // optional - default 'month/year'
        },

        // Default placeholders for rendered fields - optional
        placeholders: {
          number: '•••• •••• •••• ••••',
          name: 'Full Name',
          expiry: '••/••',
          cvc: '•••'
        },

        // if true, will log helpful messages for setting up Card
        debug: true // optional - default false
      });

      // End of Card

      var errorCount = 0;
      function updateFormErrorWithDelta(delta) {
        errorCount = delta === 0 ? 0 : errorCount + delta;
        if (errorCount <= 0) {
          errorCount = 0;
        }
        $('.subscribeform').find('.checkoutbutton').prop('disabled', errorCount > 0);
      }

      function stripeResponseHandler(status, response) {
        var $form = $('.subscribeform');
        if (response.error) {
          $form.find('.cc-error').removeClass('hidden').text(response.error.message);
          $form.find('.checkoutbutton').prop('disabled', errorCount !== 0);
        } else {
          var token = response.id;
          $form.append($('<input type="hidden" name="stripeToken">').val(token));
          $form.get(0).submit();
        }
      };

      function checkUserEmail$(data) {
        return $.ajaxAsObservable({
          url: 'emailCheck',
          data: data,
          dataType: 'json'
        })
        .catch(function(err) {
          return Rx.Observable.return({success : false});
        });
      }

      function checkUserEmail(el) {
        var popoverVisible = false
        $(el).popover({
                    placement:'right',
                    trigger:'manual',
                    container: 'body',
                    html:true,
                    content:'<p>User already exists.<br/>Please <a href="/login">Login</a> instead</p>'
                });

        var sub = $(el).keyupAsObservable()
          .merge($(el).focusoutAsObservable())
          .map( function (ev) {
            return {
              f: (ev.type === 'focusout'),
              e: $(ev.target).val()
            };
          })
          .filter( function (data) { return !data.e || data.e.length > 2; })
          .sample(500)
          .distinctUntilChanged()
          .flatMapLatest(checkUserEmail$)
          .map( function(data) { return data.data; } )
          .filter( function (data) { return data.success; })
          .subscribe(
            function (data) {
              if (data.userExists && !popoverVisible) {
                $(el).popover('show');
                popoverVisible = true;
                updateFormErrorWithDelta(1);
              } else if (!data.userExists && popoverVisible) {
                $(el).popover('hide');
                popoverVisible = false;
                updateFormErrorWithDelta(-1);
              }
            }
        );
      }

      function checkPasswordStrength($strengthLabel, password) {
        $strengthLabel.removeClass();
        password = password.trim();

        if(password.length === 0) {
          $strengthLabel.addClass('passnone');
          return 'None';
        }

        const strength = zxcvbn(password);

        switch(strength.score) {
          case 0:
            $strengthLabel.addClass('passveryweak');
            $('#passwordStrength').val('very_weak');
            return 'Very Weak';
          case 1:
            $strengthLabel.addClass('passweak');
            $('#passwordStrength').val('weak');
            return 'Weak';
          case 2:
            $strengthLabel.addClass('passgood');
            $('#passwordStrength').val('good');
            return 'Good';
          case 3:
            $strengthLabel.addClass('passstrong');
            $('#passwordStrength').val('strong');
            return 'Strong';
          default:
            $strengthLabel.addClass('passverystrong');
            $('#passwordStrength').val('very_strong');
            return 'Very Strong';
        }
      }

      $.validator.addMethod("lettersonly", function(value, element) {
        return this.optional(element) || /^[a-z .]+$/i.test(value);
      }, "Letters and spaces only, please!");

      $.validator.addMethod("nowhitespace", function(value, element) {
        return this.optional(element) || (value.indexOf(" ") < 0 && value !== "");
      }, "No white spaces please.");

      $(function() {
        // Password Strength
        var $strengthLabel = $('#passStrength');
        $('#pass').keyup(function(){
          $('#passStrength').html(checkPasswordStrength($strengthLabel, $('#pass').val()));
        });

        // Form validation and submittion
        var $form = $('.subscribeform');

        $form.validate({
          rules: {
            name: {
              required: true,
              lettersonly: true,
              minlength: 5,
              maxlength: 60
            },
            email: {
              required: true,
              email: true
            },
            pass: {
              required: true,
              nowhitespace: true,
              minlength: 5,
              maxlength: 100
            },
            passcheck: {
              required: true,
              nowhitespace: true,
              equalTo: "#pass"
            }
          },
          messages: {
            name: {
              required: "Please provide your full name."
            },
            email: {
              required: "Please provide an email address."
            },
            pass: {
              required: "Please provide a password."
            },
            passcheck: {
              required: "Please confirm your password.",
              equalTo: "The passwords don't match."
            }
          }
        });

        Stripe.setPublishableKey('#{config.STRIPE_PUB_KEY}');

        $form.submit(function(event) {
          $form.find('.checkoutbutton').prop('disabled', true);
          $form.find('.cc-error').addClass('hidden').text('');
          Stripe.card.createToken($form, stripeResponseHandler);
          return false;
        });

        checkUserEmail($('input[name="email"]'));
      });
    }));
  

block content
  style.
    .pricing--featured .pricing__content li {
      color: #fff;
    }
    .rowaccent {
      background-color: #eee;
    }
    .wrapper {
      margin: 10px 0 10px 0;
      background-color: white;
      padding-top: 1px;
      padding-left: 20px;
      padding-right: 20px;
      padding-bottom: 10px;
    }
    .passnone{
      color: #FF0000;
    }
    .passveryweak{
      color: #FF0000;
    }
    .passweak{
      color: #E66C2C;
    }
    .passgood{
      color: #2D98F3;
    }
    .passstrong{
      color: #009900;
    }
    .passverystrong{
      color: #00E500;
    }
  if hasSubscription
    .alert.alert-warning(role='alert')
      | You are already logged in and have active subscription. Please&nbsp;
      a(href='/app/logout') Log Out
      | &nbsp;and try again or go to&nbsp;
      a(href='/app') Application Dashboard
  else
    br
    br
    .container
      .row
        .col-sm-7.col-sm-offset-3.col-md-5.col-md-offset-4.col-lg-6.col-lg-offset-3
          h1.text-center
            strong Sign up for Patient Reviews
          h4.text-center 30-Day Money Back Guarantee.&nbsp;
            a(href=changePlanUrl) Change Your Plan
            | &nbsp;Anytime.
      br
      .row
        .col-sm-7.col-sm-offset-3.col-md-5.col-md-offset-4.rowaccent.col-lg-4.col-lg-offset-4
          form.subscribeform(action=checkoutUrl, method='POST')
            input.form-control(type='hidden', name='_csrf', value=_csrf)
            input.form-control(type='hidden', name='plan', value=plan)
            input.form-control(type='hidden', name='passwordStrength', id='passwordStrength', value='none')
            .wrapper
              h3.text-center Selected Plan
              br
              span
                strong #{planInfo.name}&nbsp;
                a(href=changePlanUrl) (Change&nbsp;Plan)
              .form-group
                .radio
                  label
                    input(type='radio', name='payOccurence', value='monthly', checked=1)
                    | Monthly subscription $#{planInfo.price[0]}
                .radio
                  label
                    input(type='radio', name='payOccurence', value='6m')
                    | 6 Months subscription $#{planInfo.price[1]}
                .radio
                  label
                    input(type='radio', name='payOccurence', value='yearly')
                    | 12 Months subscription $#{planInfo.price[2]}
            if (!user || _.isEmpty(user))
              .wrapper
                h3 Account Information
                br
                .form-group
                  input.form-control(type='text', placeholder='Full Name', name='name', value=formValues.name)
                .form-group
                  input.form-control(type='email', placeholder='Email\t\t(Will be your username)', name='email', value=formValues.email)
                .form-group
                  input.form-control(type='password', placeholder='Password\t(No spaces)', name='pass', id='pass', value=formValues.pass)
                .form-group
                  input.form-control(type='password', placeholder='Confirm\t\t(No spaces)', name='passcheck', value=formValues.passcheck)
                .form-group
                  span
                    strong Password Strength:
                    span
                      strong
                        em.passnone(id='passStrength' style='margin-left: 40px;') None
            else
              input.form-control(type='hidden', name='hasUser', value=user.id)
            .wrapper
              .row.display-tr(style='display: table-row;height:50px;')
                h3(style="font-weight: bold;margin-top: 0;margin-bottom: 0;font-size: 16px;color: inherit;display:table-cell;vertical-align:middle;width: 50%;") Payment Details
                .display-td(style="display:table-cell;vertical-align:middle;width: 50%;")   
                  img.img-responsive.pull-right(src="http://i76.imgup.net/accepted_c22e0.png")
              .alert.alert-danger.hidden.cc-error(role='alert') &nbsp;
              .card-wrapper
              br
              .form-group
                .row(style='padding:0;margin:0')
                  .col-sm-12(style='padding:0;margin:0')
                    .input-group(style="position: relative;display:table;border-collapse: separate;")
                      input.form-control(type='text', name='number', size='20', data-stripe='number', placeholder='Card number', style='padding:0 5px;border-radius:0px;border-top-right-radius: 0;border-bottom-right-radius: 0;display: table-cell;')
                      span.input-group-addon(style="padding: 6px 12px;font-size: 14px;font-weight: 400;line-height: 1;color: #555;text-align: center;background-color:#eee;border: 1px solid #ccc;border-radius: 0px; width: 1%;white-space: nowrap;vertical-align: middle;display:table-cell;border-left:0;border-bottom-left-radius:0;")
                        i.fa.fa-credit-card
              .form-group
                .row(style='padding:0;margin:0')
                  .col-sm-5(style='padding:0;margin:0')
                    input.form-control(type='text', size='4', name='exp' data-stripe='exp', placeholder="MM/YY", style='padding:0 5px;border-radius:0px')
                  //-   input.form-control(type='text', size='2', name='exp_month' data-stripe='exp_month', placeholder='mm')
                  //- .col-sm-3
                  //-   input.form-control(type='text', size='2', name='exp_year', data-stripe='exp_year', placeholder='yy')
                  .col-sm-2(style='padding:0;margin:0')
                    input.form-control(type='text', size='4', name='cvc', data-stripe='cvc', placeholder='CVC', style='padding:0 5px;border-radius:0px;border-left:0')
                  .col-sm-5(style='padding:0;margin:0;border-left:0')
                    input.form-control(type='text', size='6', data-stripe='address_zip', placeholder='ZIP', style='padding:0 5px;border-radius:0px;border-left:0')
            if (config.STRIPE_PUB_KEY.indexOf('pk_test_') === 0)
              a(href='https://stripe.com/docs/testing#cards') Test Cards
            .row.rowaccent(style='padding: 20px;')
              .col-sm-8.col-sm-offset-2
                .form-group
                  button.btn.btn-primary.form-control.checkoutbutton(type='submit') Finish
      br
      br


